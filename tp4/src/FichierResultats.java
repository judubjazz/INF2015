import net.sf.json.JSONArray;import net.sf.json.JSONObject;import java.util.ArrayList;/** * Classe FichierResultats * * La classe permet de créer une instance contenant les valeurs monétaires calculées par le département. * Elle permet d'inclure les recommandations faîtes par la classe Recommandation. Avec sa méthode publique * ecrire(), elle écrit son contenu sous forme d'objet JSON dans un fichier. */public class FichierResultats {	// Attributs	private JSONObject contenu;	// Constructeur	public FichierResultats(String messageErreur){	    this.contenu = new JSONObject();	    this.contenu.accumulate("Message: ", messageErreur);	}	public FichierResultats(){		this.contenu = new JSONObject();	}    /**     * Ajoute au contenu de l'instance les informations requises du département ainsi que les     * recommandations s'il y en a.     *     * @param departement     * @param recommandations     */	public void ajouterContenu(Departement departement, Recommandation recommandations){		ajouterResultats(departement);		if(recommandations.nonVide()){		    ArrayList<String> listeRecommandations = recommandations.getRecommandations();			ajouterRecommandation(listeRecommandations);		}	}	/**	 * Ajoute au contenu de l'instance, le résultats des calculs des valeurs monétaires du département.	 *	 * @param departement	 */	private void ajouterResultats(Departement departement) {		Utilitaires.DECIMAL_SEPARATOR.setDecimalSeparator('.');		Utilitaires.DECIMAL_FORMAT.setDecimalFormatSymbols(Utilitaires.DECIMAL_SEPARATOR);		JSONArray salaireParEmploye = inclureSalaireParEmploye(departement);		this.contenu.accumulate("valeur_totale", Utilitaires.DECIMAL_FORMAT.format(departement                .getValeurTotale()) + " " +                "$");		this.contenu.accumulate("rente_provinciale", Utilitaires.DECIMAL_FORMAT.format(departement                .getRenteProvinciale                ()) +				" $");		this.contenu.accumulate("rente_federale", Utilitaires.DECIMAL_FORMAT.format(departement                .getRenteFederale()) +                " $");		this.contenu.accumulate("salaires", salaireParEmploye);	}	/**	 * Ajoute au contenu une JSONArray contenant les noms et salaires des employés du département.	 *	 * @param departement	 * @return salairesParEmploye	 */	private JSONArray inclureSalaireParEmploye (Departement departement){		ArrayList<Employe> employes = departement.getEmployes();		JSONArray salaireParEmploye = new JSONArray();		JSONObject nomEtValeur = new JSONObject();		double salaire;		for (Employe employe : employes) {			nomEtValeur.accumulate("nom", employe.getNom());			salaire = employe.getSalaire();			nomEtValeur.accumulate("valeur_par_employe", Utilitaires.DECIMAL_FORMAT.format(salaire) + " $");			salaireParEmploye.add(nomEtValeur);			nomEtValeur.clear();		}		return salaireParEmploye;	}    /**     * Ajoute au contenu les recommandations.     *     * @param recommandations     */	private void ajouterRecommandation(ArrayList<String> recommandations){	    JSONArray recommandationsJson = new JSONArray();	    for (String recommandation : recommandations) {	        recommandationsJson.add(recommandation);        }	    this.contenu.accumulate("Recommandations", recommandationsJson);    }    /**     * Écrit le contenu de l'instance dans un fichier passé en paramètre lors de l'appel du programme.     *     * @param nomDuFichierDeResultats     */	public void ecrire(String nomDuFichierDeResultats){		try {			String contenu = this.contenu.toString(4);			Utilitaires.createFileFromStringContent("json", nomDuFichierDeResultats, contenu);		} catch (Exception e) {			System.out.println(CustomException.ERREUR_ECRITURE);		}	}}